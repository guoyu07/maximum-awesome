set t_Co=256

" let g:airline_powerline_fonts = 1
" set nocursorline " don't highlight current line

" " keyboard shortcuts
" inoremap jj <ESC>

" " Disambiguate ,a & ,t from the Align plugin, making them fast again.
" "
" " This section is here to prevent AlignMaps from adding a bunch of mappings
" " that interfere with the very-common ,a and ,t mappings. This will get run
" " at every startup to remove the AlignMaps for the *next* vim startup.
" "
" " If you do want the AlignMaps mappings, remove this section, remove
" " ~/.vim/bundle/Align, and re-run rake in maximum-awesome.
" function! s:RemoveConflictingAlignMaps()
"     if exists("g:loaded_AlignMapsPlugin")
"         AlignMapsClean
"     endif
" endfunction
" command! -nargs=0 RemoveConflictingAlignMaps call s:RemoveConflictingAlignMaps()
" silent! autocmd VimEnter * RemoveConflictingAlignMaps

" let g:escape_vim_regex = '^$/\'

" " Function to activate a virtualenv in the embedded interpreter for
" " omnicomplete and other things like that.
" function LoadVirtualEnv(path)
"     let activate_this = a:path . '/bin/activate_this.py'
"     if getftype(a:path) == "dir" && filereadable(activate_this)
"         python << EOF
" import vim
" activate_this = vim.eval('l:activate_this')
" execfile(activate_this, dict(__file__=activate_this))
" EOF
"     endif
" endfunction

" " Load up a 'stable' virtualenv if one exists in ~/.virtualenv
" let defaultvirtualenv = $HOME . "/.virtualenvs/virtualenv"

" " Only attempt to load this virtualenv if the defaultvirtualenv
" " actually exists, and we aren't running with a virtualenv active.
" if has("python")
"     if empty($VIRTUAL_ENV) && getftype(defaultvirtualenv) == "dir"
"         call LoadVirtualEnv(defaultvirtualenv)
"     endif
" endif

" autodetect file encoding
let g:fencview_autodetect = 1      "打开文件时自动识别编码
let g:fencview_checklines = 10     "检查前后10行来判断编码
" let $FENCVIEW_TELLENC ='tellenc'

let g:EclimCompletionMethod = 'omnifunc'

if !exists('g:neocomplcache_force_omni_patterns')
	let g:neocomplcache_force_omni_patterns = {}
endif
let g:neocomplcache_force_omni_patterns.java = '\k\.\k*'

" au FileType java nnoremap <silent> <leader>i :JavaImport<cr>
" au FileType java nnoremap <silent> <leader>g :JavaSearchContext<cr>

" vdebug options
" let g:vdebug_options_defaults = {
" \    "port" : 9000,
" \    "timeout" : 20,
" \    "server" : '',
" \    "on_close" : 'stop',
" \    "break_on_open" : 1,
" \    "ide_key" : '',
" \    "debug_window_level" : 0,
" \    "debug_file_level" : 0,
" \    "debug_file" : "",
" \    "path_maps" : {},
" \    "watch_window_style" : 'expanded',
" \    "marker_default" : '⬦',
" \    "marker_closed_tree" : '▸',
" \    "marker_open_tree" : '▾',
" \    "continuous_mode"  : 0
" \}

let g:vdebug_options = {
\    "break_on_open" : 0,
\    "on_close" : 'detach',
\    "continuous_mode" : 1
\}

let g:user_emmet_settings = {
\    'html' : {
\        'snippets' : {
\            'jquery' : "<script type=\"text/javascript\" src=\"http://cdn.bootcss.com/jquery/3.1.0/jquery.min.js\"></script>",
\        }
\    }
\}

set nofoldenable    " disable folding
